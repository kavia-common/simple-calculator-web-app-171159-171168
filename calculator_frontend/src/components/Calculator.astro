---
/**
 * Calculator.astro
 * A modern, minimalist calculator implementing +, -, ×, ÷ with a central panel layout.
 * Uses Ocean Professional theme colors and smooth transitions.
 */
const ACCENT_PRIMARY = '#2563EB';
const ACCENT_SECONDARY = '#F59E0B';
const COLOR_BG = '#f9fafb';
const COLOR_SURFACE = '#ffffff';
const COLOR_TEXT = '#111827';
---

<section class="calculator-app" aria-label="Simple Calculator">
  <div class="gradient-bg" aria-hidden="true"></div>

  <div class="panel">
    <div class="panel-header">
      <h1 class="title">Calculator</h1>
      <div class="status">
        <span class="dot"></span>
        <span class="status-text">Ready</span>
      </div>
    </div>

    <div class="display" aria-live="polite" aria-atomic="true">
      <div id="history" class="history" aria-hidden="true"></div>
      <div id="current" class="current">0</div>
    </div>

    <div class="keys" role="group" aria-label="Calculator keys">
      <button class="key key-fn" data-action="clear" aria-label="Clear">C</button>
      <button class="key key-fn" data-action="sign" aria-label="Toggle sign">±</button>
      <button class="key key-fn" data-action="percent" aria-label="Percent">%</button>
      <button class="key key-op" data-op="divide" aria-label="Divide">÷</button>

      <button class="key" data-num="7">7</button>
      <button class="key" data-num="8">8</button>
      <button class="key" data-num="9">9</button>
      <button class="key key-op" data-op="multiply" aria-label="Multiply">×</button>

      <button class="key" data-num="4">4</button>
      <button class="key" data-num="5">5</button>
      <button class="key" data-num="6">6</button>
      <button class="key key-op" data-op="subtract" aria-label="Subtract">−</button>

      <button class="key" data-num="1">1</button>
      <button class="key" data-num="2">2</button>
      <button class="key" data-num="3">3</button>
      <button class="key key-op" data-op="add" aria-label="Add">+</button>

      <button class="key key-zero" data-num="0">0</button>
      <button class="key" data-action="decimal" aria-label="Decimal">.</button>
      <button class="key key-equals" data-action="equals" aria-label="Equals">=</button>
    </div>
  </div>
</section>

<style>
  :root {
    --primary: {ACCENT_PRIMARY};
    --secondary: {ACCENT_SECONDARY};
    --bg: {COLOR_BG};
    --surface: {COLOR_SURFACE};
    --text: {COLOR_TEXT};
    --text-muted: #6b7280;
    --error: #EF4444;

    --radius-lg: 18px;
    --radius-md: 12px;
    --radius-sm: 10px;

    --shadow-sm: 0 2px 6px rgba(17, 24, 39, 0.06);
    --shadow-md: 0 6px 20px rgba(17, 24, 39, 0.08);
    --shadow-lg: 0 18px 40px rgba(37, 99, 235, 0.15);

    --key-bg: #f3f4f6;
    --key-op-bg: #e8f0ff;
    --key-eq-bg: #fde68a;
  }

  .calculator-app {
    min-height: calc(100vh - 6rem);
    display: grid;
    place-items: center;
    padding: 3rem 1rem;
    background: var(--bg);
    position: relative;
    isolation: isolate;
  }

  .gradient-bg {
    position: absolute;
    inset: 0;
    background: radial-gradient(1200px 700px at 20% -10%, rgba(37, 99, 235, 0.10), transparent 60%),
                radial-gradient(1000px 600px at 80% 110%, rgba(245, 158, 11, 0.10), transparent 60%),
                linear-gradient(180deg, rgba(255,255,255,0.6), rgba(255,255,255,0));
    z-index: -1;
    pointer-events: none;
  }

  .panel {
    width: min(420px, 92vw);
    background: var(--surface);
    color: var(--text);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-md), 0 1px 0 rgba(17,24,39,0.04);
    border: 1px solid rgba(17,24,39,0.06);
    overflow: hidden;
  }

  .panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.25rem;
    border-bottom: 1px solid rgba(17,24,39,0.06);
    background: linear-gradient(180deg, rgba(37, 99, 235, 0.06), rgba(255,255,255,0));
  }

  .title {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    letter-spacing: 0.2px;
    color: var(--text);
  }

  .status {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-muted);
    font-size: 0.85rem;
  }
  .status .dot {
    width: 8px;
    height: 8px;
    background: var(--secondary);
    border-radius: 9999px;
    box-shadow: 0 0 0 4px rgba(245, 158, 11, 0.15);
  }

  .display {
    padding: 1.25rem 1.25rem 0.75rem;
    display: grid;
    gap: 0.25rem;
    min-height: 96px;
    background:
      linear-gradient(180deg, rgba(37, 99, 235, 0.06), rgba(255,255,255, 0)) padding-box,
      linear-gradient(180deg, rgba(37, 99, 235, 0.15), rgba(245, 158, 11, 0.15)) border-box;
    border-bottom: 1px solid rgba(17,24,39,0.06);
  }

  .history {
    min-height: 22px;
    text-align: right;
    color: var(--text-muted);
    font-size: 0.9rem;
    letter-spacing: 0.3px;
  }

  .current {
    text-align: right;
    font-size: clamp(1.8rem, 6vw, 2.4rem);
    font-weight: 700;
    letter-spacing: 0.4px;
    color: var(--text);
  }

  .keys {
    display: grid;
    grid-template-columns: repeat(4, minmax(0, 1fr));
    gap: 10px;
    padding: 14px;
    background: linear-gradient(180deg, rgba(17,24,39,0.02), rgba(17,24,39,0.00));
  }

  .key {
    appearance: none;
    border: none;
    border-radius: var(--radius-md);
    padding: 0.9rem 0.8rem;
    font-size: 1.05rem;
    font-weight: 600;
    color: var(--text);
    background: var(--key-bg);
    cursor: pointer;
    box-shadow: var(--shadow-sm);
    transition: transform 0.06s ease, box-shadow 0.2s ease, background 0.2s ease, color 0.2s ease;
    outline: none;
  }

  .key:hover {
    box-shadow: var(--shadow-md);
  }
  .key:active {
    transform: translateY(1px);
    box-shadow: var(--shadow-sm);
  }
  .key:focus-visible {
    outline: 2px solid var(--primary);
    outline-offset: 2px;
  }

  .key-op {
    background: linear-gradient(180deg, rgba(37, 99, 235, 0.16), rgba(37, 99, 235, 0.10));
    color: #0b3aa8;
    border: 1px solid rgba(37, 99, 235, 0.25);
  }
  .key-op:hover {
    background: linear-gradient(180deg, rgba(37, 99, 235, 0.20), rgba(37, 99, 235, 0.12));
  }

  .key-fn {
    background: linear-gradient(180deg, rgba(17,24,39,0.06), rgba(17,24,39,0.03));
    color: #1f2937;
    border: 1px solid rgba(17, 24, 39, 0.08);
  }

  .key-zero {
    grid-column: span 2;
  }

  .key-equals {
    background: linear-gradient(180deg, rgba(245, 158, 11, 0.35), rgba(245, 158, 11, 0.24));
    color: #7a4902;
    border: 1px solid rgba(245, 158, 11, 0.45);
    box-shadow: var(--shadow-md), 0 6px 18px rgba(245,158,11,0.25);
  }
  .key-equals:hover {
    background: linear-gradient(180deg, rgba(245, 158, 11, 0.42), rgba(245, 158, 11, 0.28));
    box-shadow: var(--shadow-lg);
  }

  @media (max-width: 420px) {
    .keys {
      gap: 8px;
      padding: 12px;
    }
    .key {
      padding: 0.85rem 0.75rem;
      font-size: 1.02rem;
    }
    .display {
      padding: 1rem 1rem 0.5rem;
      min-height: 88px;
    }
  }
</style>

<script>
  // Calculator logic with proper state handling and safe division
  // PUBLIC_INTERFACE
  function initCalculator() {
    /** Initialize calculator interactions and state. */
    const elHistory = document.getElementById('history');
    const elCurrent = document.getElementById('current');
    const root = document.currentScript?.closest('.panel') || document;

    let current = '0';
    let prev = null;      // previous number as string
    let op = null;        // 'add' | 'subtract' | 'multiply' | 'divide'
    let justEvaluated = false;

    function updateDisplay() {
      elCurrent.textContent = current;
      const opMap = { add: '+', subtract: '−', multiply: '×', divide: '÷' };
      elHistory.textContent =
        prev !== null && op ? `${formatNumber(prev)} ${opMap[op]}` : '';
    }

    function formatNumber(nStr) {
      // Keep string formatting; avoid losing trailing decimals during typing
      const n = Number(nStr);
      if (!isFinite(n)) return nStr;
      // Avoid scientific notation for common ranges
      if (Math.abs(n) < 1e10) {
        const parts = nStr.split('.');
        const intPart = parts[0].replace(/^-?\d+/,
          m => Number(m).toLocaleString('en-US'));
        return parts.length > 1 ? `${intPart}.${parts[1]}` : intPart;
      }
      return n.toString();
    }

    function inputDigit(d) {
      if (justEvaluated) {
        current = d;
        justEvaluated = false;
      } else {
        if (current === '0') current = d;
        else current += d;
      }
    }

    function inputDecimal() {
      if (justEvaluated) {
        current = '0.';
        justEvaluated = false;
        return;
      }
      if (!current.includes('.')) {
        current += '.';
      }
    }

    function clearAll() {
      current = '0';
      prev = null;
      op = null;
      justEvaluated = false;
    }

    function toggleSign() {
      if (current.startsWith('-')) current = current.slice(1);
      else if (current !== '0') current = '-' + current;
    }

    function percent() {
      const n = Number(current);
      if (isFinite(n)) {
        current = (n / 100).toString();
      }
    }

    function setOperator(nextOp) {
      if (op && prev !== null && !justEvaluated) {
        // chain operation
        evaluate();
      } else {
        prev = current;
      }
      op = nextOp;
      justEvaluated = false;
    }

    function evaluate() {
      if (op === null || prev === null) return;
      const a = Number(prev);
      const b = Number(current);

      let result;
      switch (op) {
        case 'add':
          result = a + b;
          break;
        case 'subtract':
          result = a - b;
          break;
        case 'multiply':
          result = a * b;
          break;
        case 'divide':
          if (b === 0) {
            // graceful handling for division by zero
            elHistory.textContent = '';
            elCurrent.textContent = 'Cannot divide by 0';
            // reset after message
            setTimeout(() => {
              clearAll();
              updateDisplay();
            }, 1200);
            return;
          }
          result = a / b;
          break;
        default:
          return;
      }
      current = result.toString();
      prev = null;
      op = null;
      justEvaluated = true;
    }

    // Keyboard support
    function handleKeyDown(e) {
      const { key } = e;
      if (/\d/.test(key)) {
        inputDigit(key);
      } else if (key === '.') {
        inputDecimal();
      } else if (key === '+' || key === '-' || key === '*' || key === '/') {
        const map = { '+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide' };
        setOperator(map[key]);
      } else if (key === 'Enter' || key === '=') {
        evaluate();
      } else if (key === 'Escape') {
        clearAll();
      } else if (key === '%') {
        percent();
      }
      updateDisplay();
    }

    // Event listeners for buttons
    root.querySelectorAll('.key').forEach(btn => {
      btn.addEventListener('click', () => {
        const num = btn.getAttribute('data-num');
        const action = btn.getAttribute('data-action');
        const operator = btn.getAttribute('data-op');

        if (num !== null) {
          inputDigit(num);
        } else if (action === 'decimal') {
          inputDecimal();
        } else if (action === 'clear') {
          clearAll();
        } else if (action === 'sign') {
          toggleSign();
        } else if (action === 'percent') {
          percent();
        } else if (operator) {
          setOperator(operator);
        } else if (action === 'equals') {
          evaluate();
        }
        updateDisplay();
      });
    });

    // Initialize
    updateDisplay();
    window.addEventListener('keydown', handleKeyDown);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCalculator);
  } else {
    initCalculator();
  }
</script>
